import React, { useRef } from 'react';
import { ApiResponse } from '../hooks/useApi';
import SummaryRenderer from './SummaryRenderer';
import NewsMeta from './NewsMeta';
import NewsStatus from './NewsStatus';
import NewsControls from './NewsControls';

interface NewsOutputProps {
  isLoading: boolean;
  error: string | null;
  data: ApiResponse | null;
  lastRequest: any;
  compactMode: boolean;
}

export function NewsOutput({ isLoading, error, data, lastRequest, compactMode }: NewsOutputProps) {
  const summaryRef = useRef<HTMLDivElement>(null);

  const copyToClipboard = async () => {
    const text = summaryRef.current?.innerText || '';
    if (!text.trim()) {
      alert('No summary to copy');
      return;
    }

    try {
      await navigator.clipboard.writeText(text);
    } catch (error) {
      console.error('Copy failed:', error);
      alert('Copy failed - try selecting text manually');
    }
  };

  const shareContent = async () => {
    const text = summaryRef.current?.innerText || '';
    if (!text.trim()) {
      alert('No summary to share');
      return;
    }

    const shareData = {
      title: `TLDRWire: ${lastRequest?.category || 'Top'} Stories`,
      text: text.slice(0, 500) + (text.length > 500 ? '...' : ''),
      url: window.location.href
    };

    try {
      if (navigator.share) {
        await navigator.share(shareData);
      } else {
        await navigator.clipboard.writeText(window.location.href);
        alert('Link copied to clipboard!');
      }
    } catch (error: any) {
      if (error?.name !== 'AbortError') {
        console.error('Share failed:', error);
        alert('Sharing failed');
      }
    }
  };

  const exportAsText = () => {
    const text = summaryRef.current?.innerText || '';
    if (!text.trim()) {
      alert('No summary to export');
      return;
    }

    const timestamp = new Date().toISOString();
    const content = `TLDRWire Summary\nGenerated: ${timestamp}\nRegion: ${lastRequest?.region || 'Unknown'}\nCategory: ${lastRequest?.category || 'Unknown'}\nStyle: ${lastRequest?.style || 'Unknown'}\n\n${text}\n\n---\nGenerated by TLDRWire (${window.location.href})`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;

    const date = new Date().toISOString().split('T')[0];
    const region = lastRequest?.region?.replace(/\s+/g, '-').toLowerCase() || 'global';
    const category = lastRequest?.category?.replace(/\s+/g, '-').toLowerCase() || 'news';
    link.download = `tldrwire-${region}-${category}-${date}.txt`;

    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const printSummary = () => window.print();

  return (
    <>
      <NewsMeta data={data} />
      <div id="status" role="alert" aria-live="assertive">
        <NewsStatus isLoading={isLoading} error={error} dataCached={!!data?.cached} />
      </div>

      <NewsControls isHidden={isLoading || !!error} onCopy={copyToClipboard} onShare={shareContent} onExport={exportAsText} onPrint={printSummary} />

      <SummaryRenderer summary={data?.summary || null} compactMode={compactMode} isLoading={isLoading} summaryRef={summaryRef} />
    </>
  );
}
