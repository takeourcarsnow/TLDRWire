.muted {
  color: var(--muted);
}

/* Theme toggle container for centering in main content */
.theme-toggle-container {
  display: flex;
  justify-content: center;
  margin-bottom: 16px;
}

.theme-toggle-container .theme-toggle {
  position: static !important;
  top: auto !important;
  right: auto !important;
}

.output {
  /* Simplified: allow the output panel to size naturally and use the
     document/page scrollbar instead of an inner scrollbar. */
  min-height: 0;
  position: relative;
  max-height: none;
  overflow: visible;
  padding: 0;
}

/* Clean wrapper for summary content to ensure edge-to-edge display */
.summary-wrapper {
  width: 100%;
  padding: 0;
  position: relative;
  /* Keep overflow visible so long content flows into the page and the
     browser scrollbar is used instead of nested scrollbars. */
  overflow: visible;
}

/* Limit width on wide screens for better readability */
@media (min-width: 768px) {
  .summary-wrapper {
    max-width: 60ch;
    margin: 0 auto;
  }
}

/* Ensure rendered summaries don't create their own scroll container */
.summary {
  max-height: none !important;
  overflow: visible !important;
}

/* Image styles for article images in summaries */
.summary img {
  max-width: 100%;
  height: auto;
  border-radius: 8px;
  margin: 8px 0;
  box-shadow: 0 2px 8px var(--shadow);
}

.summary h2 {
  margin-top: 24px;
  margin-bottom: 16px;
  font-size: 1.2rem;
  color: var(--text);
  border-bottom: 1px solid var(--border);
  padding-bottom: 8px;
}

.error {
  color: var(--danger);
  background: rgba(255,107,107,0.1);
  padding: 12px 16px;
  border-radius: 8px;
  border: 1px solid rgba(255,107,107,0.2);
  margin: 0 12px; /* Add horizontal margins since panel padding was removed */
}

.success {
  color: var(--success);
  background: rgba(102,187,106,0.1);
  padding: 12px 16px;
  border-radius: 8px;
  border: 1px solid rgba(102,187,106,0.2);
  margin: 0 12px; /* Add horizontal margins since panel padding was removed */
}

/* Preset Carousel */
.preset-carousel-container {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 4px;
  margin: 2px 0;
  position: relative;
}

.preset-carousel {
  /* button geometry variables: change these to control how many fit */
  --preset-button-width: 88px; /* total width reserved per button (increased for larger icons and labels) */
  --preset-button-gap: 6px; /* gap between buttons (used for calc only) */

  display: flex;
  gap: var(--preset-button-gap);
  overflow-x: auto;
  scroll-behavior: smooth;
  /* limit the visible area so exactly 5 buttons fit in the viewport */
  flex: 0 1 auto;
  max-width: calc(var(--preset-button-width) * 5 + var(--preset-button-gap) * 4);
  scroll-snap-type: x mandatory;
  scrollbar-width: none; /* Firefox */
  -ms-overflow-style: none; /* IE and Edge */
}

/* Stronger fade for the left and right edges so partially-visible icons
   are much more obscured. We increase the fade bands and make the pseudo-
   element overlays wider for better fallback coverage. */
.preset-carousel {
  /* mask that strongly fades the first and last ~40% of the viewport */
  -webkit-mask-image: linear-gradient(90deg, transparent 0%, black 40%, black 60%, transparent 100%);
  mask-image: linear-gradient(90deg, transparent 0%, black 40%, black 60%, transparent 100%);
  -webkit-mask-size: 100% 100%;
  mask-size: 100% 100%;
  -webkit-mask-repeat: no-repeat;
  mask-repeat: no-repeat;
}

/* Fallback for browsers that don't support mask-image: use wider pseudo-
   elements with an opaque-to-transparent gradient so the edges are visually
   faded without blocking pointer events. */
.preset-carousel::before,
.preset-carousel::after {
  content: '';
  position: absolute;
  top: 0;
  bottom: 0;
  width: 40%; /* wider fallback to match mask stops */
  pointer-events: none; /* allow clicks to pass through to buttons */
}
.preset-carousel::before {
  left: 0;
  /* stronger fade: panel color -> transparent */
  background: linear-gradient(to right, var(--panel) 0%, rgba(0,0,0,0) 60%);
  mix-blend-mode: normal;
}
.preset-carousel::after {
  right: 0;
  background: linear-gradient(to left, var(--panel) 0%, rgba(0,0,0,0) 60%);
  mix-blend-mode: normal;
}

.preset-carousel::-webkit-scrollbar {
  display: none; /* Chrome, Safari, Opera */
}

.arrow-button {
  border: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  outline: none;
  background: var(--bg-secondary);
  padding: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 32px;
  height: 32px;
  flex-shrink: 0;
  scroll-snap-align: start;
  transition: all 0.2s ease;
  cursor: pointer;
  margin-top: -8px;
  opacity: 0;
  pointer-events: none;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

/* Position the first arrow on the left */
.preset-carousel-container .arrow-button:first-child {
  left: 0;
}

/* Position the second arrow on the right */
.preset-carousel-container .arrow-button:nth-child(2) {
  right: 0;
}

/* Show arrows on hover */
.preset-carousel-container:hover .arrow-button {
  opacity: 1;
  pointer-events: auto;
}

/* Preset buttons: stack icon + label vertically and allow wider buttons to
   accommodate labels. Arrow buttons remain compact. */
.preset-button {
  border: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  outline: none;
  background: var(--bg-secondary);
  display: inline-flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 0px; /* minimal gap between icon and label */
  padding: 4px 6px; /* comfortable padding */
  /* give each button a stable width so 6 always fit */
  width: var(--preset-button-width);
  flex: 0 0 var(--preset-button-width);
  min-height: 64px; /* fixed height to prevent jumping when label appears/disappears */
  flex-shrink: 0;
    /* snap to the carousel center so programmatic centering and CSS
      scroll-snap agree â€” prevents conflicting snaps that can produce
      large jumps when wrapping between tripled segments. */
    scroll-snap-align: center;
  cursor: pointer;
}

.preset-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  /* larger base icon container so icons look prominent */
  width: 28px;
  height: 28px;
  font-size: 28px;
}

/* Default (unselected) icons should be visually muted so the selected
   preset stands out. Color is only applied when the button is selected.
   Add smooth transitions for size and color changes. */
.preset-icon,
.preset-icon svg,
.preset-icon .twemoji img {
  color: var(--muted);
  transition: color 180ms ease, width 180ms ease, height 180ms ease, font-size 180ms ease, transform 180ms ease, opacity 160ms ease;
  opacity: 0.95;
}

.preset-icon .twemoji img {
  width: 1em;
  height: 1em;
}

/* Desaturate TwEmoji images in the unselected state so they appear muted
   like the vector icons. Restore full color when the preset is selected. */
.preset-icon .twemoji img {
  filter: saturate(0.4) brightness(0.95) opacity(0.95);
  transition: filter 180ms ease, opacity 160ms ease;
}
.preset-button.selected .preset-icon .twemoji img,
.preset-button[aria-pressed="true"] .preset-icon .twemoji img {
  filter: none;
  opacity: 1;
}



/* By default hide labels to keep the carousel compact. Reveal only for
   the selected item (or when aria-pressed is true). Use opacity and
   max-width to smoothly reveal/hide without reflowing surrounding items. */
.preset-label {
  font-size: 12px;
  line-height: 1;
  color: var(--muted);
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
  display: block;
  max-width: 0; /* collapsed by default */
  transition: max-width 220ms ease, opacity 180ms ease, color 180ms ease;
  letter-spacing: 0;
  max-height: 20px; /* keep a small height for measurement */
  opacity: 0;
}

/* label reveal uses max-height/opacity but also a tiny upward translation
  to feel more like it's sliding into place */
.preset-label.visible,
.preset-button.selected > .preset-label,
.preset-button.selected .preset-label,
.preset-button[aria-pressed="true"] .preset-label {
  /* reveal label for selected/pressed buttons */
  color: var(--text);
  letter-spacing: 0.25px;
  max-width: 200px; /* allow the label to expand (constrained by button width) */
  opacity: 1;
}

/* subtle lift + shadow for selected button */
.preset-button.selected,
.preset-button[aria-pressed="true"] {
  /* color/background indicates selection */
  background: var(--bg-secondary);
  border-color: var(--border);
  color: var(--text);
  box-shadow: none !important;
}

/* keyboard focus styles for accessibility */
.preset-button:focus-visible {
  outline: 2px solid rgba(77,163,255,0.18);
  outline-offset: 2px;
}

@media (max-width: 600px) {
  .arrow-button {
    width: 24px;
    height: 24px;
    background: rgba(255,255,255,0.05);
    border: 1px solid rgba(255,255,255,0.1);
  }
}

/* In dark theme, don't show background under arrow icons */
[data-theme="dark"] .arrow-button {
  background: transparent;
  border: none;
}



.preset-button.selected .preset-icon:not([data-color]) svg,
.preset-button[aria-pressed="true"] .preset-icon:not([data-color]) svg {
  /* Tint the actual <svg> only when the preset hasn't supplied a color
     so icons that provide their own color keep it when selected. */
  color: var(--accent);
}

/* subtle selected-state color for icon and label (no motion) */
.preset-button.selected .preset-icon,
.preset-button[aria-pressed="true"] .preset-icon {
  /* Selected icons scale up regardless of whether they provided an
     explicit color. The color itself is applied either via the
     data-color/style (for presets that declare a color) or via the
     accent color for presets without an explicit color. */
  opacity: 1;
  width: 36px;
  height: 36px;
  font-size: 36px;
}

/* When the preset does NOT provide its own color, tint it using the
   accent color on selection. Presets that declare a color will be
   colored by their inline style/data-color when selected. */
.preset-button.selected .preset-icon:not([data-color]),
.preset-button[aria-pressed="true"] .preset-icon:not([data-color]) {
  color: var(--accent);
}

.preset-button.selected .preset-icon .twemoji img,
.preset-button[aria-pressed="true"] .preset-icon .twemoji img {
  width: 1em;
  height: 1em;
}
.preset-button.selected .preset-label,
.preset-button[aria-pressed="true"] .preset-label {
  color: var(--text);
}

/* Panel headers */
.panel-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  padding-bottom: 12px;
  border-bottom: 1px solid var(--border);
}

.panel-header h2 {
  margin: 0;
  font-size: 1.25rem;
  color: var(--text);
}

/* Settings sections */
.settings-section {
  margin-bottom: 24px;
}

.settings-section h3 {
  margin: 0 0 12px 0;
  font-size: 1rem;
  color: var(--text);
  font-weight: 500;
}

.note {
  font-size: 0.8rem;
  color: var(--muted);
  margin-top: 12px;
  padding: 8px 12px;
  background: rgba(255,255,255,0.02);
  border-radius: 6px;
  border: 1px solid rgba(255,255,255,0.05);
}

/* History Section Styles */
.history-list-container {
  width: 100%;
  /* let the list flow naturally and use the page scrollbar instead of
     constraining it to a viewport height which causes an extra inner
     scrollbar. Keeping a simple column flow makes better use of screen
     space on mobile and desktop. */
  display: block; /* use normal document flow so height equals content */
  gap: 12px;
  padding-left: 24px;
  padding-right: 24px;
  padding-top: 20px;
}

/* Limit width on wide screens for better readability */
@media (min-width: 768px) {
  .history-list-container {
    max-width: 60ch;
    margin: 0 auto;
  }
}

.history-search-wrapper {
  margin-bottom: 20px;
}

.history-search-input-wrapper {
  position: relative;
  display: flex;
  align-items: center;
}

.search-icon {
  position: absolute;
  left: 16px;
  color: var(--muted);
  z-index: 1;
}

.history-search-input {
  width: 100%;
  padding: 12px 12px 12px 50px;
  border-radius: 12px;
  border: 1px solid var(--border);
  background: var(--panel);
  color: var(--text);
  font-size: 14px;
  font-family: 'Playfair Display', "Segoe UI Emoji", "Noto Color Emoji", "Apple Color Emoji", "Segoe UI Symbol", serif;
  transition: var(--transition);
  outline: none;
}

.history-search-input:focus {
  border-color: var(--accent);
  box-shadow: 0 0 0 3px rgba(77,163,255,0.1);
  background: rgba(255,255,255,0.05);
}

.history-search-input::placeholder {
  color: var(--muted);
}

.history-empty-state {
  text-align: center;
  padding: 24px 12px;
  color: var(--muted);
}

.empty-icon {
  font-size: 3rem;
  margin-bottom: 16px;
  opacity: 0.6;
}

.history-empty-state h3 {
  margin: 0 0 8px 0;
  font-size: 1.1rem;
  color: var(--text);
}

.history-empty-state p {
  margin: 0;
  font-size: 0.9rem;
}

.history-grid {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 16px;
  /* allow the history to grow with the page; avoid forcing an internal
     scroll container (which shows an extra scrollbar/slider). The page
     itself will handle scrolling when needed. */
  max-height: none;
  overflow-y: visible;
  padding-right: 0;
  margin-bottom: 20px; /* small spacer so grid doesn't collide with navbar on small screens */
}

/* Prevent scrolling/marquee text from one slide bleeding into neighboring slides
   (e.g. when NewsOutput is animating and the user navigates to History). Ensure
   slides clip overflowing children and pause marquee animations when a slide
   is not active. Also make the history panel opaque so underlying content is
   never visible through empty areas. */
.swiper-slide {
  overflow: hidden; /* clip any animated content so it can't cross slide bounds */
  position: relative;
  isolation: isolate; /* create a new stacking context */
}

/* Wrapper added around each slide's content. Ensure it fills the
   available width, establishes the min-height set from React, and
   sets a touch-action that lets the app handle horizontal swipes while
   preserving native vertical scrolling behavior. */
.swipe-slide-content {
  width: 100%;
  display: block;
  /* Allow native vertical panning but let JS handle horizontal swipes */
  touch-action: pan-y;
  -ms-touch-action: pan-y;
}

/* Stop marquee animation on slides that aren't active to avoid visual bleed
   and improve performance while off-screen. */
.swiper-slide:not(.swiper-slide-active) .meta-strip-inner {
  animation-play-state: paused;
}

/* Ensure the history slide has an opaque panel background so content from
   other slides (including animated text) cannot be seen through empty areas. */
.panel.history-panel {
  background: var(--panel);
  /* make sure history establishes its own stacking context */
  position: relative;
  z-index: 1;
}

/* Hide any meta-strip markup if it lands inside the saved history snippet
   so stored summaries can't display a scrolling marquee inside history cards. */
.history-snippet .meta-strip,
.history-snippet .meta-strip-inner {
  display: none !important;
  animation: none !important;
}

.history-card {
  background: var(--panel);
  border: 1px solid var(--border);
  border-radius: 12px;
  padding: 20px;
  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  animation: historyCardFadeIn 0.4s ease-out forwards;
  opacity: 0;
  transform: translateY(10px);
  max-width: 60ch;
  margin: 0 auto;
}

.history-card:nth-child(1) { animation-delay: 0.05s; }
.history-card:nth-child(2) { animation-delay: 0.1s; }
.history-card:nth-child(3) { animation-delay: 0.15s; }
.history-card:nth-child(4) { animation-delay: 0.2s; }
.history-card:nth-child(5) { animation-delay: 0.25s; }

.history-card-header {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 16px;
  gap: 12px;
}

.history-timestamp {
  font-size: 0.8rem;
  color: var(--muted);
  font-weight: 400;
  flex-shrink: 0;
  transition: color 0.2s ease;
}

.history-timestamp:hover {
  color: var(--text);
}

.history-tags {
  display: flex;
  gap: 8px;
  flex-wrap: wrap;
  justify-content: center;
}

.history-tag {
  font-size: 0.75rem;
  padding: 4px 10px;
  border-radius: 20px;
  font-weight: 400;
  text-transform: capitalize;
  border: 1px solid transparent;
}

.region-tag {
  background: var(--panel);
  color: var(--accent);
  border-color: rgba(77,163,255,0.2);
}

.category-tag {
  background: var(--panel);
  color: var(--accent2);
  border-color: rgba(122,240,178,0.2);
}

.style-tag {
  background: var(--panel);
  color: var(--warning);
  border-color: rgba(255,167,38,0.2);
}

.history-content {
  margin-bottom: 20px;
}

.history-snippet {
  color: var(--text);
  line-height: 1.6;
  font-size: 14px;
  max-height: 4.8em;
  overflow: hidden;
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  line-clamp: 3;
  text-align: center;
}

.history-snippet * {
  color: inherit !important;
  font-size: inherit !important;
  line-height: inherit !important;
}

.history-full {
  text-align: center;
}

.history-actions {
  display: flex;
  gap: 8px;
  justify-content: center;
  flex-wrap: wrap;
}

.history-action-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 6px;
  padding: 8px 12px;
  border-radius: 8px;
  font-size: 13px;
  font-weight: 400;
  border: 1px solid var(--border);
  background: transparent;
  color: var(--text);
  cursor: pointer;
  transition: all 0.15s ease;
  min-height: 36px;
}

.apply-btn:hover {
  background: rgba(255,255,255,0.05);
  border-color: var(--accent);
}

.view-btn:hover {
  background: rgba(255,255,255,0.08);
  border-color: var(--accent);
}

.delete-btn:hover {
  background: rgba(255,255,255,0.05);
  border-color: var(--accent);
}

/* History list -> detail animations */
.history-list-wrapper {
  transition: transform 360ms cubic-bezier(0.22,1,0.36,1), opacity 300ms ease;
}
.history-list-exit {
  transform: translateX(-12px) scale(0.995);
  opacity: 0;
  pointer-events: none;
}

.history-detail {
  opacity: 1;
  transform: translateX(0);
  transition: transform 360ms cubic-bezier(0.22,1,0.36,1), opacity 280ms ease;
}
.history-detail-enter {
  opacity: 0;
  transform: translateX(12px) scale(0.995);
  animation: historyDetailEnter 360ms cubic-bezier(0.22,1,0.36,1) forwards;
}
.history-detail-exit {
  animation: historyDetailExit 320ms cubic-bezier(0.22,1,0.36,1) forwards;
}

/* Modal styles */
.modal-backdrop {
  position: fixed;
  inset: 0;
  background: rgba(0,0,0,0.5);
  display: none;
  align-items: center;
  justify-content: center;
  z-index: 2000;
}

.modal-backdrop[aria-hidden="false"] {
  display: flex;
}

/* Class-based body lock for modals: applied to <html> by Modal.tsx. */
:root.modal-open,
html.modal-open {
  /* prevent page scrolling while modal is open */
  overflow: hidden !important;
}

.modal {
  background: var(--panel);
  border: 1px solid var(--border);
  border-radius: 12px;
  padding: 20px;
  width: min(680px, 92vw);
  box-shadow: 0 20px 60px var(--shadow);
  color: var(--text);
}

.modal header {
  padding: 0 0 12px 0;
  justify-content: space-between;
  align-items: center;
}

.modal h2 {
  font-size: 1.25rem;
}

.modal .close-btn {
  background: transparent;
  min-width: auto;
  padding: 6px 10px;
}

.modal .content {
  color: var(--text);
}

.modal .content p {
  margin: 0.6em 0;
}

/* Also reveal label when the button is marked as pressed (accessibility state).
   This covers cases where JS toggles aria-pressed instead of adding classes. */
.preset-button[aria-pressed="true"] .preset-label,
.preset-button[aria-pressed="true"] > .preset-label {
  color: var(--text);
  max-width: none; /* allow full width within selected button */
}

/* Form divider for visual separation in NewsForm */
.form-divider {
  height: 1px;
  background: var(--border);
  margin: 10px 0;
  border: none;
}

/* Print styles: hide UI chrome and history when printing summaries */
@media print {
  /* Hide header, footer, fixed nav and any history/modals */
  header,
  footer,
  .bottom-navbar,
  .history-list-container,
  .history-grid,
  .history-card,
  .modal,
  .modal-backdrop {
    display: none !important;
  }

  /* Ensure the summary area uses the full page width and flows naturally */
  .summary-wrapper,
  .summary,
  .output {
    display: block !important;
    max-width: 100% !important;
    margin: 0 !important;
    padding: 0 !important;
    overflow: visible !important;
  }

  /* Remove shadows, rounded corners and background panels for clean print */
  .history-card,
  .panel,
  .modal,
  .loader,
  .preset-carousel-container {
    box-shadow: none !important;
    background: transparent !important;
    border: none !important;
  }

  /* Avoid printing focus outlines and interactive controls that don't make sense on paper */
  a,
  button,
  input,
  textarea,
  .nav-tab {
    /* Ensure printed colors are preserved where possible */
    -webkit-print-color-adjust: exact;
    print-color-adjust: exact;
    text-decoration: none !important;
    box-shadow: none !important;
  }

  /* Force page breaks between long summaries if needed */
  .summary + .summary {
    page-break-before: always;
  }
}

/* Utility: explicitly hide elements when printing. Prefer adding this class to
   components (BottomNavbar, HistoryPanel) in JSX for clarity. */
@media print {
  .no-print {
    display: none !important;
  }
}

/* Install Prompt Styles */
.install-prompt-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  backdrop-filter: blur(4px);
}

.install-prompt {
  background: var(--bg-primary);
  border-radius: 16px;
  padding: 24px;
  max-width: 320px;
  width: 90%;
  position: relative;
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  border: 1px solid var(--border);
}

.install-prompt-close {
  position: absolute;
  top: 12px;
  right: 12px;
  background: none;
  border: none;
  color: var(--muted);
  cursor: pointer;
  padding: 4px;
  border-radius: 6px;
  transition: background-color 0.2s;
}

.install-prompt-close:hover {
  background: var(--bg-secondary);
  color: var(--text-primary);
}

.install-prompt-content {
  display: flex;
  align-items: center;
  gap: 16px;
  margin-bottom: 20px;
}

.install-prompt-icon {
  font-size: 48px;
  flex-shrink: 0;
}

.install-prompt-text h3 {
  margin: 0 0 4px 0;
  font-size: 18px;
  font-weight: 600;
  color: var(--text-primary);
}

.install-prompt-text p {
  margin: 0;
  font-size: 14px;
  color: var(--muted);
  line-height: 1.4;
}

.install-prompt-button {
  width: 100%;
  background: var(--accent);
  color: white;
  border: none;
  padding: 12px 16px;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 500;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  transition: background-color 0.2s;
}

.install-prompt-button:hover {
  background: var(--accent-hover, #3a8ee6);
}

.install-prompt-button:active {
  transform: scale(0.98);
}


/* Fallback / double-ensure blur: apply a heavy filter to the app root
   when loader is active so older browsers without backdrop-filter still
   show fully blurred content. Next.js mounts the app inside #__next. */
/* When loader is active, hide the app root completely so only the loader is visible */
/* The loader overlay itself completely covers the page. No document class
   toggling is required â€” when the loader is present it blocks interaction
   and visually hides the content underneath via the overlay. */

/* Logo loader removed: related styles have been deleted */

/* Logo Loader Styles */
.logo-loader {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: var(--bg-primary);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
  transition: opacity 0.5s ease;
}

.logo-loader.hidden {
  opacity: 0;
  pointer-events: none;
}

/* When the loader is active we allow the app to mount underneath it but
   prevent interaction and visually hide it until the loader is gone. This
   ensures resources and components initialize in the background. */
.app-hidden-under-loader {
  /* Keep layout and rendering happening, but prevent user interaction */
  pointer-events: none;
  user-select: none;
  /* Fully hide content visually while still allowing the browser to
     layout and fetch resources. Using opacity keeps elements painted and
     scripts can initialize; switching to `.content-fade-in` will animate
     to visible. */
  opacity: 0;
  /* Keep elements in the rendering flow to allow images/scripts to load */
  visibility: visible;
  transform: translateZ(0);
}

.logo-loader__img {
  width: 192px;
  height: auto;
  animation: logoPulse 1.5s ease-in-out infinite;
}

@keyframes logoPulse {
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.05); }
}

/* Content fade-in animation */
.content-fade-in {
  opacity: 0;
  animation: fadeIn 0.5s ease forwards;
}

@keyframes fadeIn {
  to { opacity: 1; }
}

/* Hide portal-mounted bottom navbar while loader is active */
body.loader-active .bottom-navbar-portal {
  opacity: 0 !important;
  pointer-events: none !important;
  visibility: hidden !important;
}

/* Ensure the portal itself doesn't introduce layout when hidden */
.bottom-navbar-portal {
  position: fixed;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 1000;
}

.bottom-navbar-portal.blurred,
.bottom-navbar-portal.locked {
  /* Keep blur for visual consistency */
  filter: blur(6px);

  /* Use the same frosted-panel background the rest of the UI uses so
     the navbar composites similarly in light and dark themes. */
  background: var(--panel-glass);
  -webkit-backdrop-filter: blur(6px);
  backdrop-filter: blur(6px);

  /* Subtle divider to match the rest of the UI and remove strong shadow
     so the portal doesn't pop visually when blurred. */
  border-top: 1px solid var(--border-glass);
  box-shadow: none;
}

/* When the navbar is locked, make it non-interactive and slightly dimmed. */
.bottom-navbar-portal.locked {
  pointer-events: none;
  opacity: 0.6;
}

/* Disable the default click / tap background highlight on carousel
   buttons so taps do not flash an unwanted color on mobile/desktop. */
.preset-carousel .preset-button,
.preset-carousel .arrow-button {
  -webkit-tap-highlight-color: transparent; /* iOS / WebKit */
  tap-highlight-color: transparent; /* future-proof / non-prefixed */
  -webkit-touch-callout: none; /* disable callout on iOS */
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.preset-carousel .preset-button:active,
.preset-carousel .arrow-button:active {
  /* Keep background consistent while pressed and avoid any transient
     color overlay that mobile browsers sometimes apply. Use !important
     to override UA / generic button rules when necessary. */
  background: var(--bg-secondary) !important;
  box-shadow: none !important;
  transform: none !important;
}