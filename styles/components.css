.muted {
  color: var(--muted);
}

.output {
  /* Keep a small visual minimum but allow the panel to collapse when empty */
  min-height: 0; /* removed fixed 300px so output only takes needed space */
  position: relative;
  max-height: calc(100vh - 160px);
  overflow: hidden;
}

/* Enhanced loading states */
.loading {
  display: inline-flex;
  gap: 8px;
  align-items: center;
  padding: 16px 20px;
  border-radius: 10px;
  background: rgba(77,163,255,0.08);
  border: 1px solid rgba(77,163,255,0.2);
  backdrop-filter: blur(8px);
}

.loading .dot {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: var(--accent);
  animation: pulse 1.4s ease-in-out infinite both;
}

.loading .dot:nth-child(1) { animation-delay: -0.32s; }
.loading .dot:nth-child(2) { animation-delay: -0.16s; }
.loading .dot:nth-child(3) { animation-delay: 0s; }

/* New loader styles */
.loader {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 14px 16px;
  border-radius: 12px;
  background: linear-gradient(180deg, rgba(77,163,255,0.06), rgba(77,163,255,0.03));
  border: 1px solid rgba(77,163,255,0.18);
  box-shadow: 0 8px 24px var(--shadow);
}

.spinner {
  width: 22px;
  height: 22px;
  border-radius: 50%;
  background: conic-gradient(from 0deg, var(--accent) 0deg, transparent 240deg);
  -webkit-mask: radial-gradient(circle 8px, transparent 6px, #000 7px);
  mask: radial-gradient(circle 8px, transparent 6px, #000 7px);
  animation: spin 1s linear infinite;
}

.loader .message {
  display: grid;
  gap: 6px;
}

.loader .subtle {
  color: var(--muted);
  font-size: 0.85rem;
}

/* Render the small progress indicator used in loaders as a pseudo-element
   on the message container so the DOM doesn't need an empty <div>. This keeps
   markup simpler while preserving the animated gradient used previously. */
.loader .message::after {
  content: '';
  display: block;
  margin-top: 8px;
  width: 200px;
  max-width: 48vw;
  height: 3px;
  border-radius: 999px;
  overflow: hidden;
  background-color: var(--border);
  position: relative;
  /* animated gradient overlay using background-position */
  background-image: linear-gradient(90deg, transparent, var(--accent), transparent);
  background-repeat: no-repeat;
  background-size: 40% 100%;
  background-position: -40% 0;
  animation: progressShift 1.2s ease-in-out infinite;
}

/* Button inline spinner */
.btn-spinner {
  width: 1em;
  height: 1em;
  margin-right: 8px;
  vertical-align: -2px;
  display: inline-block;
  border-radius: 50%;
  background: conic-gradient(from 0deg, rgba(255,255,255,0.9), rgba(255,255,255,0) 60%);
  -webkit-mask: radial-gradient(circle 6px, transparent 5px, #000 6px);
  mask: radial-gradient(circle 6px, transparent 5px, #000 6px);
  animation: spin 0.9s linear infinite;
}

/* Skeleton loading */
.skeleton {
  background: linear-gradient(90deg, var(--border) 25%, rgba(255,255,255,0.1) 50%, var(--border) 75%);
  background-size: 200% 100%;
  animation: loading 1.5s infinite;
}

.error {
  color: var(--danger);
  background: rgba(255,107,107,0.1);
  padding: 12px 16px;
  border-radius: 8px;
  border: 1px solid rgba(255,107,107,0.2);
}

.success {
  color: var(--success);
  background: rgba(102,187,106,0.1);
  padding: 12px 16px;
  border-radius: 8px;
  border: 1px solid rgba(102,187,106,0.2);
}

.warning {
  color: var(--warning);
  background: rgba(255,167,38,0.1);
  padding: 12px 16px;
  border-radius: 8px;
  border: 1px solid rgba(255,167,38,0.2);
}

/* Preset Carousel */
.preset-carousel-container {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 8px;
  margin: 6px 0;
  position: relative;
}

.preset-carousel-container::before,
.preset-carousel-container::after {
  content: '';
  position: absolute;
  top: 8px;
  bottom: 8px;
  width: 20px;
  pointer-events: none;
  z-index: 1;
}

.preset-carousel-container::before {
  left: 40px;
  background: linear-gradient(to right, var(--bg-primary), transparent);
}

.preset-carousel-container::after {
  right: 40px;
  background: linear-gradient(to left, var(--bg-primary), transparent);
}

.preset-carousel {
  /* button geometry variables: change these to control how many fit */
  --preset-button-width: 40px; /* total width reserved per button */
  --preset-button-gap: 4px; /* gap between buttons (used for calc only) */

  display: flex;
  gap: var(--preset-button-gap);
  overflow-x: auto;
  scroll-behavior: smooth;
  /* limit the visible area so exactly 6 buttons fit in the viewport */
  flex: 0 1 auto;
  max-width: calc(var(--preset-button-width) * 6 + var(--preset-button-gap) * 5);
  scroll-snap-type: x mandatory;
  scrollbar-width: none; /* Firefox */
  -ms-overflow-style: none; /* IE and Edge */
}

.preset-carousel::-webkit-scrollbar {
  display: none; /* Chrome, Safari, Opera */
}

.arrow-button {
  border: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  outline: none;
  background: var(--bg-secondary);
  padding: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 32px;
  height: 32px;
  flex-shrink: 0;
  scroll-snap-align: start;
  transition: all 0.2s ease;
  cursor: pointer;
}

/* Preset buttons: stack icon + label vertically and allow wider buttons to
   accommodate labels. Arrow buttons remain compact. */
.preset-button {
  border: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  outline: none;
  background: var(--bg-secondary);
  display: inline-flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 0px; /* minimal gap between icon and label */
  padding: 1px 2px; /* very tight padding */
  /* give each button a stable width so 6 always fit */
  width: var(--preset-button-width);
  flex: 0 0 var(--preset-button-width);
  height: auto;
  flex-shrink: 0;
  scroll-snap-align: start;
  /* subtle non-motion transitions: color and background only */
  transition: background-color 180ms ease, color 180ms ease, border-color 180ms ease, transform 180ms ease;
  cursor: pointer;
  transform: scale(1);
}

.preset-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 16px;
  height: 16px;
  transform: scale(1);
}

/* icon scaling animation when selected */
.preset-button .preset-icon {
  /* icon color/opacity can animate; avoid transforms */
  transition: color 180ms ease, opacity 160ms ease, transform 180ms ease;
}

.preset-label {
  font-size: 10px;
  line-height: 1;
  color: var(--muted);
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
  display: block;
  max-width: 40px; /* much narrower for compact layout */
  /* hidden by default; reveal using the .visible class */
  max-height: 0;
  opacity: 0;
  transform: translateY(-6px);
  /* animate opacity and color/letter-spacing subtly; avoid transform-based motion */
  transition: max-height 180ms ease, opacity 180ms ease, color 200ms ease, letter-spacing 200ms ease, transform 180ms ease;
  letter-spacing: 0;
}

/* On very small screens, hide labels to keep the carousel compact and
   allow more icons to fit in one row. */
@media (max-width: 420px) {
  /* hide labels by default on very small screens to keep icons dense */
  .preset-label { display: none; }
  /* but allow the selected / visible label to appear when active */
  .preset-label.visible,
  .preset-button.selected .preset-label {
    display: block;
    max-height: 40px;
    opacity: 1;
    transform: translateY(0);
    max-width: none; /* allow full width within selected button on small screens */
  }

  /* use smaller button geometry on very small screens */
  :root, .preset-carousel { --preset-button-width: 28px; --preset-button-gap: 2px; }
  .preset-button { padding: 2px; width: var(--preset-button-width); flex: 0 0 var(--preset-button-width); }
  .preset-icon { width: 14px; height: 14px; }
  .preset-button.selected .preset-icon,
  .preset-button[aria-pressed="true"] .preset-icon {
    width: 16px;
    height: 16px;
  }
  .preset-button.selected,
  .preset-button[aria-pressed="true"] {
    width: 36px;
    flex: 0 0 36px;
  }
}

/* Backwards-compat: some code toggles 'hidden'/'visible' classes. Keep
   hidden behavior available but show labels by default. */
.preset-label.hidden {
  max-height: 0;
  opacity: 0;
  transform: translateY(-6px);
  overflow: hidden;
}

/* label reveal uses max-height/opacity but also a tiny upward translation
  to feel more like it's sliding into place */
.preset-label.visible,
.preset-button.selected > .preset-label,
.preset-button.selected .preset-label {
  /* reveal label when visible/selected - use important to override
     other display rules (small-screen hiding, other styles). */
  display: block !important;
  max-height: 40px !important; /* enough for single line */
  opacity: 1 !important;
  /* keep position stable (no transform); use color/spacing for subtle emphasis */
  color: var(--text) !important;
  letter-spacing: 0.25px !important;
  max-width: none !important; /* allow full width within selected button */
}

/* subtle lift + shadow for selected button */
.preset-button.selected,
.preset-button[aria-pressed="true"] {
  /* color/background indicates selection */
  background: var(--bg-secondary);
  border-color: var(--border);
  color: var(--text);
  box-shadow: none !important;
  width: 56px;
  flex: 0 0 56px;
  animation: presetSelect 0.3s ease-out;
}

/* keyboard focus styles for accessibility */
.preset-button:focus-visible {
  outline: 2px solid rgba(77,163,255,0.18);
  outline-offset: 2px;
}

@media (max-width: 600px) {
  .arrow-button {
    width: 24px;
    height: 24px;
    background: rgba(255,255,255,0.05);
    border: 1px solid rgba(255,255,255,0.1);
  }
}



.preset-button.selected svg {
  color: var(--accent);
}

/* subtle selected-state color for icon and label (no motion) */
.preset-button.selected .preset-icon,
.preset-button[aria-pressed="true"] .preset-icon {
  color: var(--accent);
  opacity: 1;
  width: 20px;
  height: 20px;
  animation: presetIconPulse 0.4s ease-out;
}
.preset-button.selected .preset-label,
.preset-button[aria-pressed="true"] .preset-label {
  color: var(--text);
  animation: presetLabelFade 0.3s ease-out 0.1s both;
}

/* Panel headers */
.panel-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  padding-bottom: 12px;
  border-bottom: 1px solid var(--border);
}

.panel-header h2 {
  margin: 0;
  font-size: 1.25rem;
  color: var(--text);
}

/* Settings sections */
.settings-section {
  margin-bottom: 24px;
}

.settings-section h3 {
  margin: 0 0 12px 0;
  font-size: 1rem;
  color: var(--text);
  font-weight: 500;
}

.note {
  font-size: 0.8rem;
  color: var(--muted);
  margin-top: 12px;
  padding: 8px 12px;
  background: rgba(255,255,255,0.02);
  border-radius: 6px;
  border: 1px solid rgba(255,255,255,0.05);
}

/* History Section Styles */
.history-list-container {
  width: 100%;
  /* let the list flow naturally and use the page scrollbar instead of
     constraining it to a viewport height which causes an extra inner
     scrollbar. Keeping a simple column flow makes better use of screen
     space on mobile and desktop. */
  display: block; /* use normal document flow so height equals content */
  gap: 12px;
  padding-left: 24px;
  padding-right: 24px;
}

.history-search-wrapper {
  margin-bottom: 12px;
}

.history-search-input-wrapper {
  position: relative;
  display: flex;
  align-items: center;
}

.search-icon {
  position: absolute;
  left: 12px;
  color: var(--muted);
  z-index: 1;
}

.history-search-input {
  width: 100%;
  padding: 12px 12px 12px 40px;
  border-radius: 12px;
  border: 1px solid var(--border);
  background: var(--panel);
  color: var(--text);
  font-size: 14px;
  transition: var(--transition);
  outline: none;
}

.history-search-input:focus {
  border-color: var(--accent);
  box-shadow: 0 0 0 3px rgba(77,163,255,0.1);
  background: rgba(255,255,255,0.05);
}

.history-search-input::placeholder {
  color: var(--muted);
}

.history-empty-state {
  text-align: center;
  padding: 24px 12px;
  color: var(--muted);
}

.empty-icon {
  font-size: 3rem;
  margin-bottom: 16px;
  opacity: 0.6;
}

.history-empty-state h3 {
  margin: 0 0 8px 0;
  font-size: 1.1rem;
  color: var(--text);
}

.history-empty-state p {
  margin: 0;
  font-size: 0.9rem;
}

.history-grid {
  display: grid;
  grid-template-columns: 1fr;
  gap: 16px;
  /* allow the history to grow with the page; avoid forcing an internal
     scroll container (which shows an extra scrollbar/slider). The page
     itself will handle scrolling when needed. */
  max-height: none;
  overflow-y: visible;
  padding-right: 0;
  margin-bottom: 8px; /* small spacer so grid doesn't collide with navbar on small screens */
}

.history-card {
  background: var(--panel);
  border: 1px solid var(--border);
  border-radius: 12px;
  padding: 20px;
  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  box-shadow: 0 2px 8px var(--shadow);
  animation: historyCardFadeIn 0.4s ease-out forwards;
  opacity: 0;
  transform: translateY(10px);
}

.history-card:nth-child(1) { animation-delay: 0.05s; }
.history-card:nth-child(2) { animation-delay: 0.1s; }
.history-card:nth-child(3) { animation-delay: 0.15s; }
.history-card:nth-child(4) { animation-delay: 0.2s; }
.history-card:nth-child(5) { animation-delay: 0.25s; }

.history-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 24px var(--shadow);
  border-color: rgba(77,163,255,0.2);
}

.history-card-header {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 16px;
  gap: 12px;
}

.history-timestamp {
  font-size: 0.8rem;
  color: var(--muted);
  font-weight: 400;
  flex-shrink: 0;
}

.history-tags {
  display: flex;
  gap: 8px;
  flex-wrap: wrap;
  justify-content: center;
}

.history-tag {
  font-size: 0.75rem;
  padding: 4px 10px;
  border-radius: 20px;
  font-weight: 400;
  text-transform: capitalize;
  border: 1px solid transparent;
}

.region-tag {
  background: linear-gradient(135deg, rgba(77,163,255,0.1), rgba(77,163,255,0.05));
  color: var(--accent);
  border-color: rgba(77,163,255,0.2);
}

.category-tag {
  background: linear-gradient(135deg, rgba(122,240,178,0.1), rgba(122,240,178,0.05));
  color: var(--accent2);
  border-color: rgba(122,240,178,0.2);
}

.style-tag {
  background: linear-gradient(135deg, rgba(255,167,38,0.1), rgba(255,167,38,0.05));
  color: var(--warning);
  border-color: rgba(255,167,38,0.2);
}

.history-content {
  margin-bottom: 20px;
}

.history-snippet {
  color: var(--text);
  line-height: 1.6;
  font-size: 14px;
  max-height: 4.8em;
  overflow: hidden;
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  line-clamp: 3;
}

.history-snippet * {
  color: inherit !important;
  font-size: inherit !important;
  line-height: inherit !important;
}

.history-actions {
  display: flex;
  gap: 8px;
  justify-content: flex-end;
  flex-wrap: wrap;
}

.history-action-btn {
  display: flex;
  align-items: center;
  gap: 6px;
  padding: 8px 12px;
  border-radius: 8px;
  font-size: 13px;
  font-weight: 400;
  border: 1px solid var(--border);
  background: transparent;
  color: var(--text);
  cursor: pointer;
  transition: all 0.15s ease;
  min-height: 36px;
}

.history-action-btn:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px var(--shadow);
}

.apply-btn {
  background: var(--accent);
  color: white;
  border-color: var(--accent);
}

.apply-btn:hover {
  background: rgba(77,163,255,0.9);
  border-color: rgba(77,163,255,0.9);
}

.view-btn {
  background: rgba(255,255,255,0.05);
}

.view-btn:hover {
  background: rgba(255,255,255,0.08);
  border-color: var(--accent);
}

.delete-btn {
  background: var(--danger);
  color: white;
  border-color: var(--danger);
}

.delete-btn:hover {
  background: rgba(255,107,107,0.9);
  border-color: rgba(255,107,107,0.9);
}

/* History list -> detail animations */
.history-list-wrapper {
  transition: transform 360ms cubic-bezier(0.22,1,0.36,1), opacity 300ms ease;
}
.history-list-exit {
  transform: translateX(-12px) scale(0.995);
  opacity: 0;
  pointer-events: none;
}

.history-detail {
  opacity: 1;
  transform: translateX(0);
  transition: transform 360ms cubic-bezier(0.22,1,0.36,1), opacity 280ms ease;
}
.history-detail-enter {
  opacity: 0;
  transform: translateX(12px) scale(0.995);
  animation: historyDetailEnter 360ms cubic-bezier(0.22,1,0.36,1) forwards;
}
.history-detail-exit {
  animation: historyDetailExit 320ms cubic-bezier(0.22,1,0.36,1) forwards;
}

/* Modal styles */
.modal-backdrop {
  position: fixed;
  inset: 0;
  background: rgba(0,0,0,0.5);
  display: none;
  align-items: center;
  justify-content: center;
  z-index: 2000;
}

.modal-backdrop[aria-hidden="false"] {
  display: flex;
}

.modal {
  background: var(--panel);
  border: 1px solid var(--border);
  border-radius: 12px;
  padding: 20px;
  width: min(680px, 92vw);
  box-shadow: 0 20px 60px var(--shadow);
  color: var(--text);
}

.modal header {
  padding: 0 0 12px 0;
  justify-content: space-between;
  align-items: center;
}

.modal h2 {
  font-size: 1.25rem;
}

.modal .close-btn {
  background: transparent;
  min-width: auto;
  padding: 6px 10px;
}

.modal .content {
  color: var(--text);
}

.modal .content p {
  margin: 0.6em 0;
}

/* Also reveal label when the button is marked as pressed (accessibility state).
   This covers cases where JS toggles aria-pressed instead of adding classes. */
.preset-button[aria-pressed="true"] .preset-label,
.preset-button[aria-pressed="true"] > .preset-label {
  display: block !important;
  max-height: 40px !important;
  opacity: 1 !important;
  transform: translateY(0) !important;
  color: var(--text) !important;
  max-width: none !important; /* allow full width within selected button */
}